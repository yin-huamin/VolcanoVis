# #
# # This is a Shiny web application. You can run the application by clicking
# # the 'Run App' button above.
# #
# # Find out more about building applications with Shiny here:
# #
# #    http://shiny.rstudio.com/
# #
#
# # Define UI for application that draws a histogram
# ui <- fluidPage(
#
#   # titlePanel(title = "VolcanoVis", windowTitle = "Volcano Plot With Differential Analysis"),
#   #
#   # sidebarLayout(
#   #   sidebarPanel(
#   #     width = 2,
#   #     actionButton("simulate", "Plot",class = "btn-block"),
#   #
#   #     sliderInput("cutoff_logFC", "Select LogFC Cutoff:", min = 0.1, max = 10, value = 1),
#   #     sliderInput("cutoff_pvalue", "Select PValue Cutoff:", min = 0, max = 1, value = 0.05),
#   #     sliderInput("cutoff_fdr", "Select FDR(BH) Cutoff:", min = 0, max = 1, value = 1),
#   #
#   #     checkboxInput("use_p", "PValue for Y axis ?", value = TRUE),
#   #
#   #     sliderInput("plot_alpha", "Select Transparent Level:", min = 0, max = 1, value = 0.5),
#   #     sliderInput("plot_size", "Select Point Size:", min = 0.5, max = 10, value = 2),
#   #
#   #     sliderInput("plot_xlim", "X axis Range:", value = c(-8, 8), min = -20, max = 20),
#   #     sliderInput("plot_ylim", "Y axis Range:", value = c(0,12), min = -1, max = 20),
#   #
#   #     sliderInput("show_gnum", "Show Most Signicant Gene Numbers:", value = 5, min = 0, max = 20),
#   #
#   #     textInput("color_up", "Color Of Up-Regulated Genes:",value = "red"),
#   #     textInput("color_down", "Color Of Down-Regulated Genes:", value = "blue"),
#   #     textInput("color_unsig", "Color Of Normal Genes:",value = "grey"),
#   #
#   #     textInput("plot_xlab", "X title:",value = "log2 (Fold Change)"),
#   #     textInput("plot_ylab", "Y title:",value = "-log10 (PValue)"),
#   #     textInput("plot_title", "Title:",value = ""),
#   #
#   #     selectInput("plot_theme", "Plot Theme:", theme_list)
#   #   ),
#   #   mainPanel(
#   #     fluidRow(
#   #       column(9,
#   #              plotOutput("plot",height = 600,width = 800)),
#   #       column(2,
#   #              fileInput("upload", NULL, buttonLabel = "Upload...", accept = c(".csv", ".tsv", ".txt")),
#   #              br(),br(),
#   #              downloadButton("download_png","Download:PNG"),
#   #              br(),br(),
#   #              downloadButton("download_pdf","Download:PDF"))
#   #     )
#   #
#   #
#   #   )
#   # )
#
# )
#
# server <- function(input, output, session) {
#
#   # volcano <- eventReactive(input$simulate, {
#   #
#   #   plotdata <- reactive({
#   #     if(is.null(input$upload)==T){
#   #       diffres
#   #     }else{
#   #       ext <- tools::file_ext(input$upload$name)
#   #       switch(ext,
#   #              csv = data.table::fread(input$upload$datapath, sep = ","),
#   #              tsv = data.table::fread(input$upload$datapath, sep = "\t"),
#   #              txt = data.table::fread(input$upload$datapath, sep = "\t"),
#   #              validate("Invalid file; Please upload a .csv .tsv or .txt file")
#   #       )
#   #     }
#   #   })
#   #
#   #   plot_volcano(data = plotdata(),
#   #                cutoff_logFC = input$cutoff_logFC,
#   #                cutoff_pvalue = input$cutoff_pvalue,
#   #                cutoff_fdr = input$cutoff_fdr,
#   #                use_p = input$use_p,
#   #                color_up = input$color_up,
#   #                color_down = input$color_down,
#   #                color_unsig = input$color_unsig,
#   #                plot_alpha = input$plot_alpha,
#   #                plot_size = input$plot_size,
#   #                plot_xlab = input$plot_xlab,
#   #                plot_ylab = input$plot_ylab,
#   #                plot_title = input$plot_title,
#   #                plot_xlim = input$plot_xlim,
#   #                plot_ylim = input$plot_ylim,
#   #                plot_theme = input$plot_theme,
#   #                show_gnum = input$show_gnum
#   #   )
#   # })
#   #
#   # output$plot <- renderPlot({ volcano() }, res = 96)
#   #
#   # output$download_png <- downloadHandler(
#   #   filename = function() {
#   #     "Volcano.png"
#   #   },
#   #   content = function(file) {
#   #     ggplot2::ggsave(plot = volcano(),filename =  file,dpi = 300)
#   #   }
#   # )
#   #
#   # output$download_pdf <- downloadHandler(
#   #   filename = function() {
#   #     "Volcano.pdf"
#   #   },
#   #   content = function(file) {
#   #     ggplot2::ggsave(plot = volcano(),filename =  file,dpi = 300)
#   #   }
#   # )
# }
# # Run app ----
# shinyApp(ui, server)
